//Winner_Election
/*
Given an array of n names arr of candidates in an election, where each name is a string of lowercase characters. A candidate name in the array represents a vote casted to the candidate. Print the name of the candidate that received the maximum count of votes. If there is a draw between two candidates, then print lexicographically smaller name.

Example 1:
Input:
n = 13
arr[] = {john,johnny,jackie,johnny,john 
jackie,jamie,jamie,john,johnny,jamie,
johnny,john}
Output: john 4
Explanation: john has 4 votes casted for 
him, but so does johny. john is 
lexicographically smaller, so we print 
john and the votes he received.
*/

class Solution
{
    //Function to return the name of candidate that received maximum votes.
    public static String[] winner(String arr[], int n)
    {
        String s[]=new String[2];
        HashMap <String,Integer> map= new HashMap<>();
        int value,max=0,v;
        String maxk="";
        
        for(int i=0;i<n;i++)
        {
              if(!map.containsKey(arr[i]))
                map.put(arr[i],1);
              else
              {
                  value=map.get(arr[i]);
                  map.put(arr[i],value+1);
              }
        }
        
        for(Map.Entry<String,Integer> e: map.entrySet())
        {
            v=e.getValue();//count of string name 
            if(v>max)
            {
                maxk=e.getKey();
                max=v;
            }
            else if(v==max)
            {
                if(e.getKey().compareTo(maxk)<0)//first string is less than second string
                {
                    maxk=e.getKey();
                    max=v;
                }
            }
        }
        
        s[0]=maxk;
        s[1]=Integer.toString(max);
        return(s);
        
    }
}
